//=========================== ZTE Corporation=================================//
//   Information contained in this Confidential and Proprietary work has        
//   been obtained by ZTE Corporation. This Design may be used only as          
//   authorized by a Licensing Agreement from ZTE Corporation.                  
//                                                                              
//            COPYRIGHT (C) 2008 ZTE CORPORATION                                
//                  ALL RIGHTS RESERVED                                         
//                                                                              
//   The entire notice above must be displayed on all authorized ZTE            
//   copies.  Copies may be made only to the extended consent by a              
//   Licensing Agreement from ZTE Corporation.                                  
//----------------------------------------------------------------------------//
//      Project and Control Information	                                       
//----------------------------------------------------------------------------//
//      Project Name              :   crc8_d32                             
//      Last Version              :   2.0                                       
//      This Version              :   2.0                                       
//      This module name          :   crc8_d32.v                           
//      This File generated by    :                                             
//      This File updated by      :   None                                      
//      Updated detail            :   None                                      
//----------------------------------------------------------------------------//
//      ZTE Basic Module(s) Information                                         
//----------------------------------------------------------------------------//
//      Included Contents in this Module                                        
//      File Format                :   Verilog HDL                              
//      Included File Name(s)      :   None                                     
//      Included Module(s) Name    :   None                                     
//      Function Block(s)  Name    :   None                                     
//      Task Block(s) Name         :   None                                     
//----------------------------------------------------------------------------//
//       Overview                                                               
//----------------------------------------------------------------------------//
//    CRC calculation
//      Options:
//        Data Width    : 32
//        CRC Init      : All "1"
//        Byte Reverse  : Disable
//        CRC Level     : 8
//        Polynomial    : x8+x2+x1+1
//                        1_0000_0111 [8 -> 0]
//                        CRC-8
//----------------------------------------------------------------------------//

module pla_backward_slice_crc8_d32 (
   c,
   crc_out,
   d,
   calc,
   init,
   d_valid,
   clk,
   reset
   );

input         clk;
input         reset;
input  [31:0]  d;
input         calc;
input         init;
input         d_valid;
output [7:0] c;
output [7:0]  crc_out;

reg    [7:0] c;
reg    [7:0]  crc_out;
wire   [7:0] crc_next;

always @ (posedge clk ) 
begin
   if (reset) begin
      c <= 8'hFF;
      crc_out <=  8'hFF;
   end
   else if (init) begin
      c <= 8'hFF;
      crc_out <=  8'hFF;
   end
   else if (calc & d_valid) begin
      c <= crc_next;
      crc_out <= crc_next[7:0];
   end
end

  assign crc_next[0] = c[4]^c[6]^c[7]^d[0]^d[6]^d[7]^d[8]^d[12]^d[14]^d[16]^d[18]^d[19]^d[21]^d[23]^d[28]^d[30]^d[31];
  assign crc_next[1] = c[0]^c[4]^c[5]^c[6]^d[0]^d[1]^d[6]^d[9]^d[12]^d[13]^d[14]^d[15]^d[16]^d[17]^d[18]^d[20]^d[21]^d[22]^d[23]^d[24]^d[28]^d[29]^d[30];
  assign crc_next[2] = c[0]^c[1]^c[4]^c[5]^d[0]^d[1]^d[2]^d[6]^d[8]^d[10]^d[12]^d[13]^d[15]^d[17]^d[22]^d[24]^d[25]^d[28]^d[29];
  assign crc_next[3] = c[1]^c[2]^c[5]^c[6]^d[1]^d[2]^d[3]^d[7]^d[9]^d[11]^d[13]^d[14]^d[16]^d[18]^d[23]^d[25]^d[26]^d[29]^d[30];
  assign crc_next[4] = c[0]^c[2]^c[3]^c[6]^c[7]^d[2]^d[3]^d[4]^d[8]^d[10]^d[12]^d[14]^d[15]^d[17]^d[19]^d[24]^d[26]^d[27]^d[30]^d[31];
  assign crc_next[5] = c[1]^c[3]^c[4]^c[7]^d[3]^d[4]^d[5]^d[9]^d[11]^d[13]^d[15]^d[16]^d[18]^d[20]^d[25]^d[27]^d[28]^d[31];
  assign crc_next[6] = c[2]^c[4]^c[5]^d[4]^d[5]^d[6]^d[10]^d[12]^d[14]^d[16]^d[17]^d[19]^d[21]^d[26]^d[28]^d[29];
  assign crc_next[7] = c[3]^c[5]^c[6]^d[5]^d[6]^d[7]^d[11]^d[13]^d[15]^d[17]^d[18]^d[20]^d[22]^d[27]^d[29]^d[30];

endmodule
