//FILE_HEADER-------------------------------------------------------
//ZTE Copyright(C)
// ZTE Company Confidential
//------------------------------------------------------------------
// Project Name : ZXLTE xxxx
// FILE NAME    : tx_subportid_separate.v
// AUTHOR       : xxx xxx
// Department   : ZTE-Tianjin Department
// Email        : xxx.xxx@zte.com.cn
//------------------------------------------------------------------
// Module Hiberarchy:
//x f1_back_mac -----|----U11_pla_id_num_chk
//x                            |----
//-----------------------------------------------------------------
// Release History:
//-----------------------------------------------------------------
// Version      Date      Author    Description
// 1.0        09-09-2011   YAO      原始版本说明；
// 1.1        mm-dd-yyyy   Author   修改、增减的主要内容描述
//-----------------------------------------------------------------
// Main Function:
// a)分离出subport id
// b)将无效的pla number如PAUSE帧滤除
//-----------------------------------------------------------------
//REUSE ISSUES: xxxxxxxx
//Reset Strategy: xxxxxxxx
//Clock Strategy: xxxxxxxx
//Critical Timing: xxxxxxxx
//Asynchronous Interface: xxxxxxxx
//END_HEADER--------------------------------------------------------

`timescale 1 ns / 10 ps

module f1_back_mac(
input             I_pla_rst           ,
input             I_pla_312m5_clk     ,///

input      [31:0] I_xgmii_txd         ,///
input      [ 3:0] I_xgmii_txc         ,///
input             I_xgmii_err         , ////CRC err进口 
input      [1:0]  I_xgmii_num         ,

input             I_num_test_en       ,/// 1滤除,0保留
input             I_statics_clr       ,
         
input      [31:0] I_subport0_id       ,///
input      [31:0] I_subport1_id       ,///
input      [31:0] I_subport2_id       ,///

output reg [ 1:0] O_xgmii_num        ,////
output reg [31:0] O_xgmii_txd         ,////
output reg [ 3:0] O_xgmii_txc         ,////

output reg [15:0] O_back0_lose_cnt     ,
output reg [15:0] O_back1_lose_cnt     ,
output reg [15:0] O_back2_lose_cnt    

);

reg [31:0] S_xgmii_txd            ;///XGMII发送数据延迟1拍信号
reg [ 3:0] S_xgmii_txc            ;///XGMII发送使能延迟1拍信号
reg        S_xgmii_err            ;///XGMII发送使能延迟1拍信号
reg [31:0] S1_xgmii_txd           ;///XGMII发送数据延迟2拍信号
reg [ 3:0] S1_xgmii_txc           ;///XGMII发送使能延迟2拍信号
reg        S1_xgmii_err           ;///XGMII发送使能延迟1拍信号
reg [31:0] S2_xgmii_txd           ;///XGMII发送数据延迟3拍信号
reg [ 3:0] S2_xgmii_txc           ;///XGMII发送使能延迟3拍信号
reg        S2_xgmii_err           ;///XGMII发送使能延迟1拍信号
reg [31:0] S3_xgmii_txd           ;///XGMII发送数据延迟4拍信号
reg [ 3:0] S3_xgmii_txc           ;///XGMII发送使能延迟4拍信号
reg        S3_xgmii_err           ;///XGMII发送使能延迟1拍信号
reg [31:0] S4_xgmii_txd           ;///XGMII发送数据延迟5拍信号
reg [ 3:0] S4_xgmii_txc           ;///XGMII发送使能延迟5拍信号
reg        S4_xgmii_err           ;///XGMII发送使能延迟1拍信号

reg [1:0]  S4_xgmii_num           ;
reg [1:0]  S3_xgmii_num           ;
reg [1:0]  S2_xgmii_num           ;
reg [1:0]  S1_xgmii_num           ;
reg [1:0]  S_xgmii_num            ;

reg        S_preamble_flag        ;///
reg [ 3:0] S_cnt                  ;///
reg        S_xgmii_data_valid     ;///
reg [ 6:0] S1_xgmii_data_valid    ;///


reg [31:0] S_subport_tag          ;///

reg [31:0] S_oxgmii_txd           ;///
reg [ 3:0] S_oxgmii_txc           ;///
reg        S_oxgmii_err           ;
reg [1:0]  S_oxgmii_num           ;

reg  [31:0] S_xgmii_txd_crc           ;
reg  [ 3:0] S_xgmii_txc_crc           ;
reg         S_xgmii_err_crc           ;
reg  [ 1:0] S_xgmii_num_crc           ;
reg  [31:0] S_xgmii_txd_buf1          ;
reg  [ 3:0] S_xgmii_txc_buf1          ;
reg         S_xgmii_err_buf1          ;
reg  [ 1:0] S_xgmii_num_buf1          ;
reg  [31:0] S_xgmii_txd_buf2          ;
reg  [ 3:0] S_xgmii_txc_buf2          ;
reg         S_xgmii_err_buf2          ;
reg  [ 1:0] S_xgmii_num_buf2          ;
reg  [31:0] S_xgmii_txd_buf3          ;
reg  [ 3:0] S_xgmii_txc_buf3          ;
reg         S_xgmii_err_buf3          ;
reg  [ 1:0] S_xgmii_num_buf3          ;

reg  [ 3:0] S_xgmii_txd_buf4          ;
reg  [ 3:0] S_xgmii_txc_buf4          ;
reg  [ 1:0] S_xgmii_num_buf4          ;

wire [31:0] S_crc_out                 ;

reg        S_test_en         ;
reg        S_lose0_trig;
reg        S_lose2_trig;
reg        S_lose1_trig;


always @ (posedge I_pla_312m5_clk or posedge I_pla_rst)
begin
    if(I_pla_rst)
        O_back0_lose_cnt <= 16'd0;
    else if(I_statics_clr)
        O_back0_lose_cnt <= 16'd0;  
    else if (S_lose0_trig)
        O_back0_lose_cnt <= O_back0_lose_cnt +16'd1;
end


always @ (posedge I_pla_312m5_clk or posedge I_pla_rst)
begin
    if(I_pla_rst)
        O_back1_lose_cnt <= 16'd0;
    else if(I_statics_clr)
        O_back1_lose_cnt <= 16'd0;  
    else if (S_lose1_trig)
        O_back1_lose_cnt <= O_back1_lose_cnt +16'd1;
end



always @ (posedge I_pla_312m5_clk or posedge I_pla_rst)
begin
    if(I_pla_rst)
        O_back2_lose_cnt <= 16'd0;
    else if(I_statics_clr)
        O_back2_lose_cnt <= 16'd0;  
    else if (S_lose2_trig)
        O_back2_lose_cnt <= O_back2_lose_cnt +16'd1;
end



///数据打拍
always @ (posedge I_pla_312m5_clk or posedge I_pla_rst)
begin
    if(I_pla_rst)
    begin
        S_xgmii_txd   <= 32'h0;
        S_xgmii_txc   <= 4'hf;
        S1_xgmii_txd  <= 32'h0;
        S1_xgmii_txc  <= 4'hf;
        S2_xgmii_txd  <= 32'h0;
        S2_xgmii_txc  <= 4'hf;
        S3_xgmii_txd  <= 32'h0;
        S3_xgmii_txc  <= 4'hf;
        S4_xgmii_txd  <= 32'h0;
        S4_xgmii_txc  <= 4'hf;
        S_test_en     <= 1'b0;
        
        S4_xgmii_num   <= 2'd0;
        S3_xgmii_num   <= 2'd0;
        S2_xgmii_num   <= 2'd0;
        S1_xgmii_num   <= 2'd0;
        S_xgmii_num    <= 2'd0;
    end
    else
    begin
        S_xgmii_txd    <= I_xgmii_txd  ;
        S_xgmii_txc    <= I_xgmii_txc  ;

        S1_xgmii_txd   <= S_xgmii_txd  ;
        S1_xgmii_txc   <= S_xgmii_txc  ;
		    S1_xgmii_err   <= S_xgmii_err  ;
        S2_xgmii_txd   <= S1_xgmii_txd ;
        S2_xgmii_txc   <= S1_xgmii_txc ;
		    S2_xgmii_err   <= S1_xgmii_err ;
        S3_xgmii_txd   <= S2_xgmii_txd ;
        S3_xgmii_txc   <= S2_xgmii_txc ;
		    S3_xgmii_err   <= S2_xgmii_err ;
        S4_xgmii_txd   <= S3_xgmii_txd ;
        S4_xgmii_txc   <= S3_xgmii_txc ;
		    S4_xgmii_err   <= S3_xgmii_err ;
		    
		    S4_xgmii_num   <= S3_xgmii_num ;
		    S3_xgmii_num   <= S2_xgmii_num ;
		    S2_xgmii_num   <= S1_xgmii_num ;
		    S1_xgmii_num   <= S_xgmii_num  ;
		    S_xgmii_num    <= I_xgmii_num  ;

        S_test_en      <= I_num_test_en;
        
        if (I_xgmii_err)
        begin
		        S_xgmii_err <= I_xgmii_err  ;
		    end    
        else if (I_xgmii_txc == 4'hf)
        begin
            S_xgmii_err <= I_xgmii_err  ;
        end
    end
end

///连续收到Preamble的0x5555标志产生
always @ (posedge I_pla_312m5_clk or posedge I_pla_rst)
begin
    if(I_pla_rst)
        S_preamble_flag <= 1'b0;
    else if((S_xgmii_txc == 4'h8)&&(S_xgmii_txd == 32'hfb555555)&&(I_xgmii_txc == 4'h0)&&(I_xgmii_txd == 32'h555555d5))  ///非压缩报文
        S_preamble_flag <= 1'b1;
    else
        S_preamble_flag <= 1'b0;
end

///连续收到Preamble的0x5555标志产生
always @ (posedge I_pla_312m5_clk or posedge I_pla_rst)
begin
    if(I_pla_rst)
        S_cnt <= 4'hf;
    else if(S_preamble_flag)  ///非压缩报文
        S_cnt <= 4'd0;
    else
    begin
        if (S_cnt == 4'hf)
            S_cnt <= S_cnt;
        else
            S_cnt <= S_cnt + 4'b1;
    end
end

///数据有效部分指示   SPID在TAG上
always @ (posedge I_pla_312m5_clk or posedge I_pla_rst)
begin
    if(I_pla_rst)
    begin
        S_subport_tag  <= 32'd0;
    end
    else if (S_xgmii_data_valid && (S_cnt == 4'd3))
    begin
        if (I_xgmii_num == 2'd0)
            S_subport_tag  <= I_subport0_id;
        else if  (I_xgmii_num == 2'd1)
            S_subport_tag  <= I_subport1_id;
        else if  (I_xgmii_num == 2'd2)
            S_subport_tag  <= I_subport2_id;  
    end
end


always @ (posedge I_pla_312m5_clk or posedge I_pla_rst)
begin
    if(I_pla_rst)
        S_xgmii_data_valid <= 1'b0;
    else if(S_preamble_flag)  ///非压缩报文
        S_xgmii_data_valid <= 1'b1;
    else if(I_xgmii_txc == 4'hf)
        S_xgmii_data_valid <= 1'b0;
end


always @ (posedge I_pla_312m5_clk or posedge I_pla_rst)
begin
    if(I_pla_rst)
        S1_xgmii_data_valid <= 7'd0;
    else
        S1_xgmii_data_valid <= {S1_xgmii_data_valid[5:0],S_xgmii_data_valid};
end

///分离出 Subport_tag 的数据
always @ (posedge I_pla_312m5_clk or posedge I_pla_rst)
begin
    if(I_pla_rst)
    begin
        S_oxgmii_txd   <= 32'd0 ;
        S_oxgmii_txc   <= 4'hf  ;
		    S_oxgmii_err   <= 1'b0  ;
		    S_oxgmii_num   <= 2'd0 ;
    end
    else if(S_cnt == 4'd4 && S_test_en)     ////滤除subport tag
    begin
        S_oxgmii_txd   <= S_subport_tag;
        S_oxgmii_txc   <= S4_xgmii_txc;
		    S_oxgmii_err   <= S4_xgmii_err;
		    S_oxgmii_num   <= S4_xgmii_num;
    end
    else
    begin
        S_oxgmii_txd   <= S4_xgmii_txd;
        S_oxgmii_txc   <= S4_xgmii_txc;
		    S_oxgmii_err   <= S4_xgmii_err;
		    S_oxgmii_num   <= S4_xgmii_num ;
    end
end


///无效的pla number滤除
always @ (posedge I_pla_312m5_clk or posedge I_pla_rst)
begin
    if(I_pla_rst)
    begin
        S_xgmii_num_crc <= 2'd3;
        S_xgmii_txd_crc     <= 32'h07070707;
        S_xgmii_txc_crc     <= 4'hf;
		    S_xgmii_err_crc     <= 1'b0 ;
    end
    else if((S_xgmii_data_valid || S1_xgmii_data_valid[6])&& I_xgmii_num != 2'd3)
    begin
        S_xgmii_num_crc     <= S_oxgmii_num     ;
        S_xgmii_txd_crc     <= S_oxgmii_txd     ;
        S_xgmii_txc_crc     <= S_oxgmii_txc     ;
		    S_xgmii_err_crc     <= S_oxgmii_err     ;
    end
    else
    begin
        S_xgmii_num_crc     <= S_oxgmii_num ;
        S_xgmii_txd_crc     <= 32'h07070707 ;
        S_xgmii_txc_crc     <= 4'hf ;
		    S_xgmii_err_crc     <= 1'b0 ;
    end
end


////////////////////////////////////////////////////////////////////////////////////////////////////
crc32_top   U_crc32_top  (
.I_rst            (1'b0                ),  ///复位信号，高有效
.I_sys_clk        (I_pla_312m5_clk     ),  ///系统时钟
.I_crc_data       (S_xgmii_txd_crc     ),  ///Gmii数据
.I_xgmii_ctl      (S_xgmii_txc_crc     ),  ///EGMII数据奇偶标识
.O_crc_out        (S_crc_out           )   ///
);

always @(posedge I_pla_312m5_clk)
begin
    S_xgmii_txd_buf1 <= S_xgmii_txd_crc ;
    S_xgmii_txc_buf1 <= S_xgmii_txc_crc ;
    S_xgmii_err_buf1 <= S_xgmii_err_crc ;
	  S_xgmii_num_buf1 <= S_xgmii_num_crc  ;
end

always @(posedge I_pla_312m5_clk)
begin
    S_xgmii_txd_buf2 <= S_xgmii_txd_buf1 ;
    S_xgmii_txc_buf2 <= S_xgmii_txc_buf1 ;
    S_xgmii_err_buf2 <= S_xgmii_err_buf1 ;
	  S_xgmii_num_buf2 <= S_xgmii_num_buf1 ;
end

always @(posedge I_pla_312m5_clk)
begin
    S_xgmii_txd_buf3 <= S_xgmii_txd_buf2 ;
    S_xgmii_txc_buf3 <= S_xgmii_txc_buf2 ;
    S_xgmii_err_buf3 <= S_xgmii_err_buf2 ;
	  S_xgmii_num_buf3  <= S_xgmii_num_buf2 ;
end


always @(posedge I_pla_312m5_clk)
begin
    if(S_xgmii_txc_buf1[3] && !S_xgmii_txc_buf2[3])
	begin
	    if(!S_xgmii_err_buf2)
		begin
	        case(S_xgmii_txc_buf2[2:0])
		    3'b000:  S_xgmii_txd_buf4 <= S_xgmii_txd_buf3 ;
		    3'b001:  S_xgmii_txd_buf4 <= {S_xgmii_txd_buf3[31:8],S_crc_out[31:24]};
		    3'b011:  S_xgmii_txd_buf4 <= {S_xgmii_txd_buf3[31:16],S_crc_out[31:16]};
		    3'b111:  S_xgmii_txd_buf4 <= {S_xgmii_txd_buf3[31:24],S_crc_out[31:8]};
		    default : S_xgmii_txd_buf4 <= S_xgmii_txd_buf3 ;
		    endcase
		end
		else
		begin
	        case(S_xgmii_txc_buf2[2:0])
		    3'b000: S_xgmii_txd_buf4 <= S_xgmii_txd_buf3 ;
		    3'b001: S_xgmii_txd_buf4 <= {S_xgmii_txd_buf3[31:8],8'h0};
		    3'b011: S_xgmii_txd_buf4 <= {S_xgmii_txd_buf3[31:16],16'h0};
		    3'b111: S_xgmii_txd_buf4 <= {S_xgmii_txd_buf3[31:24],24'h0};
		    default : S_xgmii_txd_buf4 <= S_xgmii_txd_buf3 ;
		    endcase
		end
	end
	else if(S_xgmii_txc_buf2[3] && !S_xgmii_txc_buf3[3])
	begin
	    if(!S_xgmii_err_buf3)
		begin
	        case(S_xgmii_txc_buf3[2:0])
		    3'b000: S_xgmii_txd_buf4 <= S_crc_out ;
		    3'b001: S_xgmii_txd_buf4 <= {S_crc_out[23:0],8'hfd};
		    3'b011: S_xgmii_txd_buf4 <= {S_crc_out[15:0],16'hfd07};
		    3'b111: S_xgmii_txd_buf4 <= {S_crc_out[7:0],24'hfd0707};
		    default : S_xgmii_txd_buf4 <= S_xgmii_txd_buf3 ;
		    endcase
		end
		else
		begin
	        case(S_xgmii_txc_buf3[2:0])
		    3'b000: S_xgmii_txd_buf4 <= 32'h0 ;
		    3'b001: S_xgmii_txd_buf4 <= {24'h0,8'hfd};
		    3'b011: S_xgmii_txd_buf4 <= {16'h0,16'hfd07};
		    3'b111: S_xgmii_txd_buf4 <= {8'h0,24'hfd0707};
		    default : S_xgmii_txd_buf4 <= S_xgmii_txd_buf3 ;
		    endcase
		end
	end
	else
	begin
	    S_xgmii_txd_buf4 <= S_xgmii_txd_buf3 ;
	end
end

always @(posedge I_pla_312m5_clk)
begin
    S_xgmii_txc_buf4 <= S_xgmii_txc_buf3 ;
    S_xgmii_num_buf4 <= S_xgmii_num_buf3 ;
end


always @(posedge I_pla_312m5_clk)
begin
    if (S_test_en)
    begin
        O_xgmii_txd  <= S_xgmii_txd_buf4  ;
        O_xgmii_txc  <= S_xgmii_txc_buf4  ;     
        O_xgmii_num  <= S_xgmii_num_buf4  ;     
    end
    else 
    begin
        O_xgmii_txd  <= I_xgmii_txd       ; 
        O_xgmii_txc  <= I_xgmii_txc       ;     
        O_xgmii_num  <= I_xgmii_num   ; 
    end
end





             
reg      [15:0]   S_test0_num;
reg      [15:0]   S1_test0_num;
reg      [15:0]   S_test1_num;
reg      [15:0]   S1_test1_num;
reg      [15:0]   S_test2_num;
reg      [15:0]   S1_test2_num;

always @ (posedge I_pla_312m5_clk or posedge I_pla_rst)
begin
    if(I_pla_rst)
    begin
    	  S_lose0_trig <=1'd0;
    	  S1_test0_num <= 16'h0000;
    	  S_test0_num <= 16'h0000;
    end
    else if (I_statics_clr)
    begin
    	  S_lose0_trig <=1'd0;    
    end
    else if (S_cnt == 4'd1 && S_xgmii_num == 2'd0 && S_test_en)   
    begin
        S_test0_num  <= S1_xgmii_txd[15:0]; 
    end 
    else if (S_cnt == 4'd2 && S_xgmii_num == 2'd0 && S_test_en)   
    begin
        if( S_test0_num != S1_test0_num + 16'd1)    
        begin   
            S_lose0_trig <= 1'b1;
        end     
        else
        begin
            S_lose0_trig <= 1'b0;
        end    
        S1_test0_num  <= S_test0_num;
    end         
    else 
    begin
        S_lose0_trig <= 1'b0;
    end
end


always @ (posedge I_pla_312m5_clk or posedge I_pla_rst)
begin
    if(I_pla_rst)
    begin
    	  S_lose1_trig <=1'd0;
    	  S1_test1_num <= 16'h0000;
    	  S_test1_num <= 16'h0000;
    end
    else if (I_statics_clr)
    begin
    	  S_lose1_trig <=1'd0;    
    end
    else if (S_cnt == 4'd1 && S_xgmii_num == 2'd0 && S_test_en)   
    begin
        S_test1_num  <= S1_xgmii_txd[15:0]; 
    end 
    else if (S_cnt == 4'd2 && S_xgmii_num == 2'd0 && S_test_en)   
    begin
        if( S_test1_num != S1_test1_num + 16'd1)    
        begin   
            S_lose1_trig <= 1'b1;
        end     
        else
        begin
            S_lose1_trig <= 1'b0;
        end    
        S1_test1_num  <= S_test1_num;
    end         
    else 
    begin
        S_lose1_trig <= 1'b0;
    end
end


always @ (posedge I_pla_312m5_clk or posedge I_pla_rst)
begin
    if(I_pla_rst)
    begin
    	  S_lose2_trig <=1'd0;
    	  S1_test2_num <= 16'h0000;
    	  S_test2_num <= 16'h0000;
    end
    else if (I_statics_clr)
    begin
    	  S_lose2_trig <=1'd0;    
    end
    else if (S_cnt == 4'd1 && S_xgmii_num == 2'd0 && S_test_en)   
    begin
        S_test2_num  <= S1_xgmii_txd[15:0]; 
    end 
    else if (S_cnt == 4'd2 && S_xgmii_num == 2'd0 && S_test_en)   
    begin
        if( S_test2_num != S1_test2_num + 16'd1)    
        begin   
            S_lose2_trig <= 1'b1;
        end     
        else
        begin
            S_lose2_trig <= 1'b0;
        end    
        S1_test2_num  <= S_test2_num;
    end         
    else 
    begin
        S_lose2_trig <= 1'b0;
    end
end




endmodule
